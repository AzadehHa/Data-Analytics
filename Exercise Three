#T-test
# Tip: 1.for independent t-tests we need ttest_ind librarie and ttest_rel librarie for paired t-tests
#      2.Setosa: A species in the Iris dataset known for its shorter petal lengths.
#        Versicolor: A species with moderately longer petal lengths compared to Setosa.

from scipy.stats import ttest_ind
from sklearn.datasets import load_iris
import pandas as pd

iris = load_iris()
iris_data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_data['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)

setosa_petal_length = iris_data[iris_data['species'] == 'setosa']['petal length (cm)']
versicolor_petal_length = iris_data[iris_data['species'] == 'versicolor']['petal length (cm)']

t_stat, p_value = ttest_ind(setosa_petal_length, versicolor_petal_length)

print(f"Mean Petal Length of Setosa: {setosa_petal_length}")
print(f"Mean Petal Length of Versicolor: {versicolor_petal_length}")
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")
---------------------------------------------------------------------------
#Z-test
from statsmodels.stats.weightstats import ztest
from sklearn.datasets import load_iris
import pandas as pd

iris = load_iris()
iris_data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_data['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)

setosa_sepal_length = iris_data[iris_data['species'] == 'setosa']['sepal length (cm)']

hypothesized_mean = 5.0

z_stat, p_value_z = ztest(setosa_sepal_length, value=hypothesized_mean)

print(f"Z-statistic: {z_stat}")
print(f"P-value: {p_value_z}")

#Explanation: Because the p-value (0.904) is much larger than conventional level  (e g, 0.05),  we cannot reject the Null Hypothesis, 
  so there is no statistically significant evidence to conclude that the mean sepal length of Setosa is different from 5.0.
----------------------------------------------------------------------------
#ANOVA
import pandas as pd
from sklearn.datasets import load_iris
import statsmodels.api as sm
from statsmodels.formula.api import ols

iris = load_iris()
iris_data = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_data['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)

# Tip: 1. petal width as the dependent variable and species as the independent variable
#      2. one-way ANOVA using statsmodels
model = ols('Q("petal width (cm)") ~ species', data=iris_data).fit()
anova_results = sm.stats.anova_lm(model, typ=2)

print(anova_results)
----------------------------------------------------------------------------
#Correlation/Regression
import pandas as pd
from sklearn.datasets import load_iris
import statsmodels.api as sm
import seaborn as sns
import matplotlib.pyplot as plt

iris = load_iris()
iris_data = pd.DataFrame(data=iris.data, columns=iris.feature_names)

correlation = iris_data['sepal length (cm)'].corr(iris_data['petal length (cm)'])

print(f"Correlation between Sepal Length and Petal Length: {correlation}")


X = iris_data['sepal length (cm)']  
Y = iris_data['petal length (cm)']  

X_with_const = sm.add_constant(X)
model = sm.OLS(Y, X_with_const).fit()

print(model.summary())

sns.scatterplot(x='sepal length (cm)', y='petal length (cm)', data=iris_data, color='blue', label='Data')
plt.plot(X, model.predict(X_with_const), color='red', label='Regression Line')
plt.legend()
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Petal Length (cm)')
plt.title('Relationship between Sepal Length and Petal Length')
plt.show()

#Explanation: Due to the definition and types of Correlation Analysis, we can explain that in this example Pearson Correlation is Coefficient.






















